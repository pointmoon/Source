#include <iostream>

using namespace std;
class queue //Класс очереди
{
private:
	struct queue_ob// Структура для хранения элементов очереди
	{
		int value;//Поле для хранения значения элемента очереди
		queue_ob *addr; // Поле для хранения слеющего элемента
	};

	queue_ob *head; // указатель, хранящий адресс головы очереди
	queue_ob *tail; // Указатель хранящий адрес хвоста
	int size; //Текущий размер очереди

public:
	queue()// Конструктор класса
				//В параметр передается голова очереди
	{
		head=new(queue_ob); //Выделяем память под элемент
		tail=head; // При создании очереди хвост и голова являются одним и тем же элементом
		head->value=0; // Записываем значение
		head->addr=0; // Адрес ноль, так как следующего элемента пока нет
		size=1; // После выделения памяти и заполянения полей структуры очередь стала иметь размер 1
	}

	int stack_size()//Функция возвращает размер очереди(кол-во элеменетов)
	{
		return size;
	}

	//int get_value() { return value; }

    void push(int value)// Добавляет(вталкивает) элемент в очередь
    {
        size++;// Кол-во элементов очереди увеличивается
        queue_ob *temp=new(queue_ob); // Выделяем память под новый хвост очереди
        temp->addr=0; // Записываем в поле адреса нового хвоста ноль, так как за ничего нету
        temp->value=value; //Заполняем поле значения нового хвоста
        tail->addr=temp; // Записываем в поле адреса старого хвоста адрес нового хвоста
        tail=temp; //Записываем в указель хвоста адрес действительного хвоста
        cout << "В очередь записано: " << value << endl;
    }

    void pop(int *ret)//Удаляет элемент(выталкивает) и возвращает его
                     // По адресу, хранящемся в ret, передается значение удаляемой головы
    {
        if(size == 0)
        {
            cout<<"Очередь пуста - удалять нечего!"<<endl;
            return;
        }

        queue_ob *temp=head; // записываем адрес головы
        *ret=head->value; // записываем значени головы
        head=head->addr; // изменяем адрес головы
        delete temp;  // удаляем старую голову
        size--; // уменьшаем размер
    }

void peek(int *ret)//Выгружает значение по адресу, передаваемому в парметре
{
	if(size == 0) // Если очередь пуста(size == 0), то ничего не выгружает
		{
			cout<<"Очередь пуста!"<<endl;
			return;
		}
	*ret=head->value;// Выгружаем значение головы
}
};




//наследуем класс queue
class queue1 : private queue{
public:
    push_new(int INPUT)
    {
        push(INPUT);
    }

    pop_new(int *pTemp)
    {
        pop(pTemp);
    }
	queue1() : queue(){};//конструктор
	float x_garm(int D);//объявляем прототип функции
};

float queue1::x_garm(int D){//описываем саму функцию
	int i = 0, N = D;
	float sum = 0, x = 0;
	for (i = 1; i <= N; i++){
		sum += 1 / float(i);
	}
	x = N / sum;
	return x;
}


int main()
{
    setlocale(LC_ALL, "Russian");

	int b;
	queue1 a; //Создлаем очередь (она инциализируется 0)
	a.push_new(5); //Загружаем 1
	a.push_new(3); //Загружаем 2
	a.push_new(4); //Загружаем 3
    a.pop_new(&b); //Выгрузили 0 из стека
    a.pop_new(&b);
    cout << "1.) " << a.x_garm(b) << endl;
    a.pop_new(&b);
    cout << "2.) " << a.x_garm(b) << endl;
    a.pop_new(&b);
    cout << "3.) " << a.x_garm(b) << endl;

	return 0;
}
